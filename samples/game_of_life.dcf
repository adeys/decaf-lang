class rndModule {

  int seed;

  construct(int seedVal) {
    this.seed = seedVal;
  }

  Random(): int {
    this.seed = (15625 * (this.seed % 10000) + 22221) % 65536;
    return this.seed;
  }

  RndInt(int max): int {
    return (this.Random() % max);
  }

}

class cell
{
  bool state;

  construct( bool state) {
    this.state = state;
  } 

  GetState(): bool {
    return this.state;
  }

  SetState(bool state): void {
    this.state = state;
  }
  
}



class column {
  int length;
  cell[] arr;

  GetY(int y): cell {
    return this.arr[y];
  }
  
  SetY(int y, cell c): void {
    this.arr[y] = c;
  }

  
  construct(int length) {
    int y;
    this.arr = array(length, cell);
    this.length = length;
    
    for(y = 0; y < length; y = y + 1) {
        this.arr[y] = new cell(false);
    }
  }

}



class matrix
{
  int x_dim;
  int y_dim;
  column [] col;

  construct(int x_dim, int y_dim) {
    int x;
    int y;
    this.y_dim = y_dim;
    this.x_dim = x_dim;

    this.col = array(x_dim, column);

    for(x = 0; x < x_dim; x = x + 1) {
        this.col[x] = new column(y_dim);
    }
  }

  Set(int x, int y, bool state): void {
      column mcol;
      cell mcell;

      if(x < 0 ) return;
      if(x >= this.x_dim) return;

      if(y < 0 ) return;
      if(y >= this.y_dim) return;

      mcol = this.col[x];
      mcell = mcol.GetY(y);
     
      mcell.SetState(state);
  }

  Get(int x, int y): bool {
    column mcol;
    cell mcell;

    if(x < 0 ) return false;
    if(x >= this.x_dim) return false;

    if(y < 0 ) return false;
    if(y >= this.y_dim) return false;

    mcol = this.col[x];
    mcell = mcol.GetY(y);

    return mcell.GetState();
  }
  
}


class life
{
  
  matrix current;

  matrix m0;
  matrix m1;

  rndModule rnd;
  
  
  int x_dim;
  int y_dim;

  Init(int x_dim, int y_dim): void
  {
    int x;
    int y;

    x = 0;
    y = 0;
    this.x_dim = x_dim;
    this.y_dim = y_dim;

    this.m0 = new matrix(x_dim, y_dim);
    this.m1 = new matrix(x_dim, y_dim);
    
    this.current = this.m0;
    
    for(y = 0; y < this.y_dim; y = y + 1)
      {
	for(x = 0; x < this.x_dim; x = x + 1)
	  {
	    this.m0.Set(x,y,false);
	    this.m1.Set(x,y,false);
	  }
      }
    
  }

  
  SetInit(int x, int y, bool state): bool {
    
    if(x < 0) return false;
    if(y < 0) return false;
    if(x >= this.x_dim) return false;
    if(y >= this.y_dim) return false;

    
    this.current.Set(x,y,state);
    return true;
  }


  printMatrix(): void {
    int x;
    int y;
    int s;

    for(y = 0; y < this.y_dim; y = y + 1)
      {
	for(x = 0; x < this.x_dim; x = x + 1)
	  {
	    

	     if(this.current.Get(x,y))
             {
               s = 1;
             }
             else
             {
               s = 0;
             }

	    print("| ", s , " ");
        
	    if(x == (this.x_dim - 1))
	      {
		print("|\n");
	      }
	  }
      }

  }

    
  DoLife(): void {
    int x;
    int y;
    
    int i;
    int j;

    matrix n;

    

    if(this.current == this.m0)
      {
	n = this.m1;
      }
    else
      {
	n = this.m0;
      }

     
     
    for(y = 0; y < this.y_dim; y = y + 1)
      {
	for(x = 0; x < this.x_dim; x = x + 1)
	  {
	    int neigh_count;
	    bool my_state;
	    neigh_count = 0;
	    my_state = this.current.Get(x,y);

	    
	    for(j = (y - 1); j < (y + 2); j = j + 1)
	      {
		for(i = (x - 1); i < (x + 2); i = i + 1)
		  {
		    
		    bool skip;
		    skip = (x == i) && (y == j);
		    
                    
		    if((!skip) && this.current.Get(i,j))
		      {
			neigh_count = neigh_count + 1;
		      }
		    		    
		  }
		
	      }

	      
	    if(my_state)
	      {
		 
		if((neigh_count == 2) || (neigh_count == 3)) 
		  {
		    n.Set(x,y,true);
		  }
		else
		  {
		    n.Set(x,y,false);
		  }
	      }
            
	    else
	      {
                
		if(neigh_count == 3)
		  {
		    n.Set(x,y,true);
		  }

                
		else
		  {
		    n.Set(x,y,false);
		  }
		
	      }


	  }
      }

      
    
    this.current = n;


  }
  
  
  runLife(int gen): void {
    int i;
    int iter;
    i = 0;
    
    if(gen < 0) 
    {
      iter = 0; 
    }
    else
    {
      iter = gen;
    }


    print("Initial generation\n");
    this.printMatrix();
    
    while(i < iter)
      {
	this.DoLife();
	print("new generation = ", i, "\n");
        this.printMatrix();
	i = i + 1;
      }

  }

  playLife(): void {
     int x;
     int y;
     int gen; 
     int use_rand;

     x = 0;
     y = 0;
     gen = 0;
     use_rand = 0;
     print("The Game of Life using (Brown Univ) CS31 Rules\n");
     
     
     print("Enter X dimension for game board\n");
     while(x <= 0)
     {
       x = readInt();
       if(x <= 0) 
       {
         print("Invalid x dimension, try again\n");
       }
     }

     
     print("Enter Y dimension for game board\n");
     while(y <= 0)
     {
       y = readInt();
       if(y <= 0) 
       {
         print("Invalid y dimension, try again\n");
       }
     }
    
           
    this.Init(x,y);
    x = 0;
    y = 0;

    
    print("Would you like to use a random starting state?\n");
    print("Type 0 for no, anything else for yes\n");

    use_rand = readInt();

    if(use_rand != 0)
    {
       print("Please enter an random seed\n");
       x = readInt();
       
       this.rnd = new rndModule(x);
	
       gen = this.rnd.RndInt(this.x_dim * this.y_dim);
       
       while(gen > 0)
       {
        x = this.rnd.RndInt(this.x_dim);
	y = this.rnd.RndInt(this.y_dim);
        this.SetInit(x,y,true);

        gen = gen - 1;
       }


    }
    else
    {   
      print("Input initial live cell\n"); 
      while( (x != -1) && (y != -1))
      {
        print("Enter x\n");
	x = readInt();
	print("Enter y\n");
	y = readInt();
        
        if(!((x == -1) && (y == -1)))
        {    
	  if(!this.SetInit(x,y,true))
          {
	     print("x = ",x, " and y = ", y, "are bad coords\n");
	     print("Try again\n");
          }
	  else
          {
	      print("Entering x = ",x, ", y = ", y, "\n");
          }
        }
     }
   }

   print("How many generations would like you run?\n");
   gen = readInt();

   this.runLife(gen);
    		 
  }

}

func main(): void {    
    life l;
    l = new life();

    l.playLife();

}