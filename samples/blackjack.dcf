
class Random {

  int seed;

  Init(int seedVal): void {
    this.seed = seedVal;
  }

  GenRandom(): int {
    this.seed = (15625 * (this.seed % 10000) + 22221) % 65536;
    return this.seed;
  }

  RndInt(int max): int {
    return (this.GenRandom() % max);
  }

}

Random gRnd = null;

class Deck {

  int current;
  int[] cards;

  Init(): void {
    this.cards = array(52, int);
  }

  Shuffle(): void {
    for (this.current = 0; this.current < 52; this.current = this.current + 1) {
      this.cards[this.current] = (this.current + 1) % 13;
    }

    while (this.current > 0) {
      int r;
      int temp;
      r = gRnd.RndInt(this.current);
      this.current = this.current - 1;
      temp = this.cards[this.current];
      this.cards[this.current] = this.cards[r];
      this.cards[r] = temp;
    }
  }

  GetCard(): int {
    int result;
    if (this.current >= 52) return 0;
    result = this.cards[this.current];
    this.current = this.current + 1;
    return result;
  }
}

class BJDeck {

  Deck[] decks;
  int numdealt;

  Init(): void {
    int i;
    this.decks = array(8, Deck);
    for (i = 0; i < 8; i = i + 1) {
      this.decks[i] = new Deck();
      this.decks[i].Init();
    }
  }

  DealCard(): int {
    int c;
    c = 0;
    if (this.numdealt >= 8*52) return 11;
    while (c == 0) {
      int d;
      d = gRnd.RndInt(8);
      c = this.decks[d].GetCard();
    }
    if (c > 10) c = 10;
    else if (c == 1) c = 11;
    this.numdealt = this.numdealt + 1;
    return c;
  }

  Shuffle(): void {
    int i;

    print("Shuffling...");
    for (i = 0; i < 8; i = i + 1)
      this.decks[i].Shuffle();

    this.numdealt = 0;
    print("done.\n");
  }

  NumCardsRemaining(): int {
    return 8*52 - this.numdealt;
  }
}

class Player {
  int total;
  int aces;
  int numcards;
  int bet;
  int money;
  string name;

  Init(int num): void {
    this.money = 1000;
    print("What is the name of player #", num, "? ");
    this.name = readLine();
  }

  Hit(BJDeck deck): void {
    int card;
    card = deck.DealCard();
    print(this.name, " was dealt a ", card, ".\n");
    this.total = this.total + card;
    this.numcards = this.numcards + 1;
    if (card == 11) this.aces = this.aces + 1;
    while ((this.total > 21) && (this.aces > 0)) {
      this.total = this.total - 10;
      this.aces = this.aces - 1;
    }
  }

  DoubleDown(BJDeck deck): bool {
    int result;
    if ((this.total != 10) && (this.total != 11)) return false;
    if (GetYesOrNo("Would you like to double down?")) {
      this.bet = this.bet * 2;
      this.Hit(deck);
      print(this.name, ", your total is ", this.total, ".\n");
      return true;
    }
    return false;
  }

  TakeTurn(BJDeck deck): void {
    bool stillGoing;

    print("\n", this.name, "'s turn.\n");
    this.total = 0;
    this.aces = 0;
    this.numcards = 0;
    this.Hit(deck);
    this.Hit(deck);
    if (!this.DoubleDown(deck)) {
      stillGoing = true;
      while (this.total <= 21 && stillGoing) {
        print(this.name, ", your total is ", this.total, ".\n");
        stillGoing = GetYesOrNo("Would you like a hit?");
        if (stillGoing) this.Hit(deck);
      }
    }
    if (this.total > 21) print(this.name, " busts with the big ", this.total, "!\n");
    else print(this.name, " stays at ", this.total, ".\n");
  }

  HasMoney(): bool { return this.money > 0; }

  printMoney(): void {
    print(this.name, ", you have $", this.money, ".\n");
  }

  PlaceBet(): void {
    this.bet = 0;
    this.printMoney();
    while ((this.bet <= 0) || (this.bet > this.money)) {
      print("How much would you like to bet? ");
      this.bet = readInt();
    }
  }

  GetTotal(): int { return this.total;}

  Resolve(int dealer): void {
    int win; int lose;
    win = 0; lose = 0;
    if ((this.total == 21) && (this.numcards == 2)) win = 2;
    else if (this.total > 21) lose = 1;
    else if (dealer > 21) win = 1;
    else if (this.total > dealer) win = 1;
    else if (dealer > this.total) lose = 1;
    if (win >= 1) print(this.name, ", you won $", this.bet, ".\n");
    else if (lose >= 1) print(this.name, ", you lost $", this.bet, ".\n");
    else print(this.name, ", you push!\n");
    win = win * this.bet;
    lose = lose * this.bet;
    this.money = this.money + win - lose;
  }
}

class Dealer : Player {

  Init(int id): void {
    this.total = 0;
    this.aces = 0;
    this.numcards = 0;
    this.name = "Dealer";
  }

  TakeTurn(BJDeck deck): void {
    print("\n", this.name, "'s turn.\n");
    while (this.total <= 16) {
      this.Hit(deck);
    }
    if (this.total > 21) print(this.name, " busts with the big ", this.total, "!\n");
    else print(this.name, " stays at ", this.total, ".\n");
  }
}



class House {
  Player[] players;
  Dealer dealer;
  BJDeck deck;


  SetupGame(): void {
    print("\nWelcome to CS143 BlackJack!\n");
    print("---------------------------\n");
    gRnd = new Random();
    print("Please enter a random number seed: ");
    gRnd.Init(readInt());
 
    this.deck = new BJDeck();
    this.dealer = new Dealer();
    this.deck.Init();
    this.deck.Shuffle();
  }

  SetupPlayers(): void {
    int i;
    int numPlayers;
    print("How many players do we have today? ");
    numPlayers = readInt();
    this.players = array(numPlayers, Player);
    for (i = 0; i < this.players.length(); i = i + 1) {
      this.players[i] = new Player();
      this.players[i].Init(i+1);
    }
  }

  TakeAllBets(): void {
    int i;
    print("\nFirst, let's take bets.\n");
    for (i = 0; i < this.players.length(); i = i + 1)
      if (this.players[i].HasMoney()) this.players[i].PlaceBet();
  }

  TakeAllTurns(): void {
    int i;
    for (i = 0; i < this.players.length(); i = i + 1)
      if (this.players[i].HasMoney()) this.players[i].TakeTurn(this.deck);
  }

  ResolveAllPlayers(): void {
    int i;

    print("\nTime to resolve bets.\n");
    for (i = 0; i < this.players.length(); i = i + 1)
      if (this.players[i].HasMoney())
        this.players[i].Resolve(this.dealer.GetTotal());
  }

  printAllMoney(): void {
    int i;

    for (i = 0; i < this.players.length(); i = i + 1)
      this.players[i].printMoney();

  }

  PlayOneGame(): void {
    if (this.deck.NumCardsRemaining() < 26) this.deck.Shuffle();
    this.TakeAllBets();
    print("\nDealer starts. ");
    this.dealer.Init(0);
    this.dealer.Hit(this.deck);
    this.TakeAllTurns();
    this.dealer.TakeTurn(this.deck);
    this.ResolveAllPlayers();
  }

}

func GetYesOrNo(string prompt): bool {
   string answer;
   print(prompt, " (y/n) ");
   answer = readLine();
   return (answer == "y" || answer == "Y");
}

func main(): void {
  bool keepPlaying;
  House house;
  keepPlaying = true;
  house = new House();
  house.SetupGame();
  house.SetupPlayers();
  while (keepPlaying) {
    house.PlayOneGame();
    keepPlaying = GetYesOrNo("\nDo you want to play another hand?");
  }
  house.printAllMoney();
  print("Thank you for playing...come again soon.\n");
  print("\nCS143 BlackJack Copyright (c) 1999 by Peter Mork.\n");
  print("(2001 mods by jdz)\n");
}